<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MarkDown学习</title>
      <link href="//Markdown/"/>
      <url>//Markdown/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级的标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成结构化的 HTML 页面。它的目标是实现“易读易写”，并且具有一定的可读性，即使在没有格式转换的情况下也能被阅读。</p><p>以下是 Markdown 的一些基本语法：</p><h2 id="标题：使用井号-表示不同级别的标题。"><a href="#标题：使用井号-表示不同级别的标题。" class="headerlink" title="标题：使用井号 # 表示不同级别的标题。"></a><strong>标题</strong>：使用井号 <code>#</code> 表示不同级别的标题。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br></pre></td></tr></table></figure><hr><h2 id="强调：使用星号-或下划线-来强调文本。"><a href="#强调：使用星号-或下划线-来强调文本。" class="headerlink" title="强调：使用星号 * 或下划线 _ 来强调文本。"></a><strong>强调</strong>：使用星号 <code>*</code> 或下划线 <code>_</code> 来强调文本。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*这是斜体文本*</span><br><span class="line">_这也是斜体文本_</span><br><span class="line">**这是加粗文本**</span><br><span class="line">__这也是加粗文本__</span><br></pre></td></tr></table></figure><p>   <em>这是斜体文本</em><br>   <em>这也是斜体文本</em><br>   <strong>这是加粗文本</strong><br>   <strong>这也是加粗文本</strong>  </p><hr><h2 id="列表："><a href="#列表：" class="headerlink" title="列表："></a><strong>列表</strong>：</h2><ol><li>无序列表使用星号 <code>*</code>、加号 <code>+</code> 或减号 <code>-</code> 来创建。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 列表项一</span><br><span class="line">* 列表项二</span><br><span class="line">* 列表项三</span><br></pre></td></tr></table></figure><ul><li>列表项一</li><li>列表项二</li><li>列表项三</li></ul></li><li>有序列表使用数字后跟一个点来创建。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></li></ol><hr><h2 id="链接：使用方括号和圆括号来创建链接。"><a href="#链接：使用方括号和圆括号来创建链接。" class="headerlink" title="链接：使用方括号和圆括号来创建链接。"></a><strong>链接</strong>：使用方括号和圆括号来创建链接。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[这是一个链接](https://alunworker.com)</span><br></pre></td></tr></table></figure><p>   <a href="https://alunworker.com/">这是一个链接</a></p><hr><h2 id="图片：使用感叹号和方括号来创建图片。"><a href="#图片：使用感叹号和方括号来创建图片。" class="headerlink" title="图片：使用感叹号和方括号来创建图片。"></a><strong>图片</strong>：使用感叹号和方括号来创建图片。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![这是图片的alt文字](https://alunworker.com/images/favicon.webp)</span><br></pre></td></tr></table></figure><p>   <img src="https://alunworker.com/images/favicon.webp" alt="这是图片的alt文字"></p><hr><h2 id="代码：使用反引号来创建行内代码，或者使用三个反引号来创建一个代码块。"><a href="#代码：使用反引号来创建行内代码，或者使用三个反引号来创建一个代码块。" class="headerlink" title="代码：使用反引号来创建行内代码，或者使用三个反引号来创建一个代码块。"></a><strong>代码</strong>：使用反引号来创建行内代码，或者使用三个反引号来创建一个代码块。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`这是行内代码`</span><br><span class="line">&#x27;```&#x27;</span><br><span class="line">&#x27;```&#x27;</span><br><span class="line">&#x27;```&#x27;</span><br><span class="line">&#x27;这是代码块&#x27;</span><br></pre></td></tr></table></figure><hr><h2 id="引用：使用大于号-来创建引用文本。"><a href="#引用：使用大于号-来创建引用文本。" class="headerlink" title="引用：使用大于号 &gt; 来创建引用文本。"></a><strong>引用</strong>：使用大于号 <code>&gt;</code> 来创建引用文本。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一段引用文本</span><br></pre></td></tr></table></figure><blockquote><p>这是一段引用文本</p></blockquote><h2 id="水平线：使用三个星号-或三个减号-来创建水平线。"><a href="#水平线：使用三个星号-或三个减号-来创建水平线。" class="headerlink" title="水平线：使用三个星号 *** 或三个减号 --- 来创建水平线。"></a><strong>水平线</strong>：使用三个星号 <code>***</code> 或三个减号 <code>---</code> 来创建水平线。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><hr><h2 id="表格：使用管道符-和连字符-来创建表格。"><a href="#表格：使用管道符-和连字符-来创建表格。" class="headerlink" title="表格：使用管道符 | 和连字符 - 来创建表格。"></a><strong>表格</strong>：使用管道符 <code>|</code> 和连字符 <code>-</code> 来创建表格。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 标题1 | 标题2 | 标题3 |</span><br><span class="line">|-------|-------|-------|</span><br><span class="line">| 单元格1 | 单元格2 | 单元格3 |</span><br><span class="line">| 单元格4 | 单元格5 | 单元格6 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>标题1</th><th>标题2</th><th>标题3</th></tr></thead><tbody><tr><td>单元格1</td><td>单元格2</td><td>单元格3</td></tr><tr><td>单元格4</td><td>单元格5</td><td>单元格6</td></tr></tbody></table><hr><h2 id="换行显示：加两个空格。"><a href="#换行显示：加两个空格。" class="headerlink" title="换行显示：加两个空格。"></a><strong>换行显示</strong>：加两个空格。</h2>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是第一行。··</span><br><span class="line">这是第二行。</span><br><span class="line">注意：在上面的示例中，·· 代表两个空格。在实际使用中，你只需要在行尾添加两个空格然后换行。</span><br></pre></td></tr></table></figure><p>   这是第一行。<br>   这是第二行。</p><hr>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shader 学习大纲</title>
      <link href="//Shader/Shader000/"/>
      <url>//Shader/Shader000/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习Shader对于游戏程序开发有很多好处，以下是一些主要原因：</p><ol><li><strong>提高渲染效率</strong>：Shader是运行在GPU上的程序，可以高效地处理图形渲染任务，比CPU更快。</li><li><strong>定制化渲染效果</strong>：通过编写Shader，开发者可以创建独特的视觉效果，如复杂的光照模型、动态阴影、高级后处理效果等。</li><li><strong>优化性能</strong>：Shader编程可以帮助开发者优化游戏性能，通过减少CPU和GPU之间的数据传输，降低延迟。</li><li><strong>跨平台兼容性</strong>：Shader语言如GLSL和HLSL等在不同的平台和设备上具有很好的兼容性，有助于游戏的多平台发布。</li><li><strong>增强视觉效果</strong>：Shader可以创建逼真的视觉效果，提高游戏的视觉效果和玩家的沉浸感。</li><li><strong>提升专业技能</strong>：掌握Shader编程可以提升开发者的专业技能，使他们能够解决更复杂的图形问题。</li><li><strong>创新和实验</strong>：Shader提供了一个实验和创新的平台，开发者可以尝试新的技术，推动图形技术的发展。</li><li><strong>职业发展</strong>：在游戏行业，对Shader编程的需求很高，掌握这项技能可以为开发者带来更多的职业机会。</li><li><strong>理解图形管线</strong>：学习Shader有助于更深入地理解图形渲染管线的工作原理，这对于游戏开发者来说非常重要。</li><li><strong>团队协作</strong>：Shader编程通常需要与美术和设计团队紧密合作，以确保视觉效果与游戏设计相匹配。</li></ol><p>学习Shader编程不仅可以提升个人技术能力，还可以为游戏开发带来更高质量的视觉效果和更好的性能。</p><h1 id="Shader学习大纲"><a href="#Shader学习大纲" class="headerlink" title="Shader学习大纲"></a>Shader学习大纲</h1><ul><li><a href="/Shader/Shader101/" title="渲染管线">渲染管线</a></li><li><a href="/Shader/Shader101/" title="3D数学">3D数学</a> 学习中......</li></ul><h1 id="Shader学习效果网站"><a href="#Shader学习效果网站" class="headerlink" title="Shader学习效果网站"></a>Shader学习效果网站</h1><p>1.<a href="https://www.shadertoy.com/">ShaderToy</a><br>2.<a href="https://shaderslab.com/">ShadersLab</a></p>]]></content>
      
      
      <categories>
          
          <category> Shader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染管线</title>
      <link href="//Shader/Shader101/"/>
      <url>//Shader/Shader101/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习Shader就离不开渲染管线，渲染管线是流水线工作的处理形式把3D元素转换到屏幕上2D图像，渲染管线大致分为4个阶段分别是:应用阶段、几何阶段、光栅化阶段、逐片元操作，游戏引擎一般还有一个比较常见的后处理阶段，最后才到输出。</p><h2 id="应用阶段"><a href="#应用阶段" class="headerlink" title="应用阶段"></a>应用阶段</h2><ul><li><strong>准备基本场景数据</strong><ul><li>场景物体数据</li><li>摄像机数据</li><li>光源及阴影数据</li><li>其他全局数据</li></ul></li><li><strong>优化(粗粒度剔除、加速算法)</strong><ul><li>视锥剔除</li><li>遮挡剔除</li><li>层级剔除</li><li>距离剔除</li><li>其他算法</li></ul></li><li><strong>设置渲染状态，准备渲染参数</strong><ul><li>绘制设置(着色器、合批方式)</li><li>绘制顺序(相对摄像机距离、材料RenderQueue、UICanvas等等)</li><li>渲染目标（FrameBuffer、RenderTexture）</li><li>渲染模式(前向渲染、延迟渲染)</li></ul></li><li><strong>调用<a href="#DrawCall">DrawCall</a>，输出<a href="#%E5%9B%BE%E5%85%83">渲染图元</a>到显存</strong><ul><li>顶点数据（位置、颜色、法线、纹理uv坐标）</li><li>其他数据（MVP变化矩阵、纹理贴图等等）</li></ul></li></ul><h2 id="几何阶段"><a href="#几何阶段" class="headerlink" title="几何阶段"></a>几何阶段</h2><ul><li><strong>顶点着色器(Vertex Shading)(可编程)</strong><ul><li>视图转变</li><li>顶点着色</li></ul></li><li><strong>投影</strong><ul><li>正交(<a href="#NDC">NDC</a>中，W等于1)</li><li>透视(<a href="#NDC">NDC</a>中，W代表与摄像机的距离,近小远大)</li></ul></li><li><strong>裁剪</strong><ul><li>视锥体裁剪(CVV)</li><li>正面或背面剔除(可配置)</li></ul></li><li><strong>屏幕映射(Screen Mapping)</strong><ul><li>视口空间坐标会被转换为屏幕坐标，这些坐标直接对应于帧缓冲区中的像素位置。</li><li>屏幕坐标的X和Y值决定了像素在屏幕上的水平和垂直位置，而Z值则用于深度缓冲区中的深度信息。</li></ul></li></ul><h2 id="光栅化阶段"><a href="#光栅化阶段" class="headerlink" title="光栅化阶段"></a>光栅化阶段</h2><ul><li><strong>三角形设置</strong><ul><li>设置直线计算边界信息</li></ul></li><li><strong>三角形遍历</strong><ul><li>遍历填充像素</li></ul></li><li><strong>其他</strong><ul><li><a href="#%E6%8A%97%E9%94%AF%E9%BD%BF">抗锯齿</a>(MSAA)</li></ul></li></ul><h2 id="逐片元操作"><a href="#逐片元操作" class="headerlink" title="逐片元操作"></a>逐片元操作</h2><ul><li><strong>片元着色(可编程)</strong><ul><li>线性插值,求像素颜色</li></ul></li><li><strong>颜色混合</strong> <ul><li>透明度测试</li><li>深度测试</li><li>模板测试</li></ul></li><li><strong>目标缓冲区</strong><ul><li>帧缓冲区FrameBuffer</li><li>渲染贴图RenderTexture</li></ul></li></ul><h2 id="后处理"><a href="#后处理" class="headerlink" title="后处理"></a>后处理</h2><ul><li><strong>Bloom</strong></li><li><strong>HDR</strong></li><li><strong>抗锯齿FXAA</strong></li><li><strong>景深(Depth of View)</strong></li><li><strong>边缘检测</strong></li><li><strong>径向模糊</strong></li></ul><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><p><strong>图元</strong>、<strong>几何图元</strong>、<strong>渲染图元</strong>三个的区别:</p><ul><li><p><strong>图元</strong>（Primitive）: 这是图形渲染中的基本单位，可以是点、线、三角形等。图元是构成更复杂图形和模型的基础⁴。</p></li><li><p><strong>几何图元</strong>（Geometry Primitive）: 这些是由图元组成的，用于描述对象的几何形状。它们是渲染管线中的输入数据，例如顶点数据、纹理坐标、顶点法线和顶点颜色等¹。</p></li><li><p><strong>渲染图元</strong>（Rendering Primitive）: 这些是在图形渲染过程中实际被处理的图元。在OpenGL中，渲染图元包括了渲染所需的几何信息，如顶点数据、线段、多边形等，并且它们对应绘图界面上可见的实体⁵。</p></li></ul><p>简单来说，图元是构建几何图元的基本元素，而渲染图元则是在渲染过程中实际被处理和转换成最终图像的元素。</p><h3 id="图元"><a href="#图元" class="headerlink" title="图元"></a>图元</h3><p><strong>图元（Primitive）</strong>是计算机图形学中的一个术语，它指的是构成计算机生成图像（Computer Graphics, CG）的基本形状或对象。图元是图形渲染过程中的最小单位，可以被视为构建更复杂场景的构建块。以下是一些常见的图元类型：</p><ul><li><strong>点（Point）</strong>：最简单的图元，由一个像素组成。</li><li><strong>线段（Line）</strong>：由两个顶点（Vertex）组成的直线。</li><li><strong>多边形（Polygon）</strong>：由多个顶点组成的封闭形状，如三角形、四边形等。</li><li><strong>曲线（Curve）</strong>：由多个点组成的连续线条，可以是贝塞尔曲线、样条曲线等。</li><li><strong>曲面（Surface）</strong>：由多个多边形组成的复杂形状，可以是平面或曲面。</li><li><strong>纹理（Texture）</strong>：虽然不是图元本身，但纹理是图元的一个重要属性，用于在图元表面添加细节和颜色。</li><li><strong>体素（Voxel）</strong>：在三维空间中的体积元素，类似于二维图像中的像素。</li></ul><h3 id="DrawCall"><a href="#DrawCall" class="headerlink" title="DrawCall"></a>DrawCall</h3><p>在计算机图形学和渲染管线中，Draw Call（绘制调用或绘制命令）是CPU向GPU发出的指令，用于告诉GPU绘制特定的几何图形或图像。一个Draw Call通常包含了一组渲染特定图像所需的全部信息。</p><h3 id="NDC"><a href="#NDC" class="headerlink" title="NDC"></a>NDC</h3><p>在计算机图形学中，NDC（Normalized Device Coordinates，归一化设备坐标）是一种坐标系统，用于在裁剪空间和屏幕空间之间进行转换。NDC坐标系的特点是其坐标值范围在-1到1之间，这使得它们非常适合用于线性变换和透视除法。</p><p>NDC中的<strong>XYZW</strong>四个分量代表：</p><ol><li><p><strong>X</strong>：代表水平方向的坐标，范围从-1到1。在NDC中，-1表示最左边的边界，1表示最右边的边界。</p></li><li><p><strong>Y</strong>：代表垂直方向的坐标，同样范围从-1到1。在NDC中，-1表示最底部的边界，1表示最顶部的边界。请注意，在不同的图形API（如OpenGL和Direct3D）中，Y轴的方向可能相反。</p></li><li><p><strong>Z</strong>：代表深度方向的坐标，也从-1到1。在NDC中，-1通常表示视图的近裁剪平面，而1表示远裁剪平面。</p></li><li><p><strong>W</strong>：这是一个额外的维度，称为齐次坐标（Homogeneous Coordinate）。它通常用于透视除法，以将三维坐标转换为二维坐标。在NDC中，W通常不等于0，因为如果W为0，那么经过透视除法后，X、Y、Z坐标将会变为未定义。</p></li></ol><p>在渲染管线的几何阶段，顶点着色器会输出NDC坐标。然后，这些坐标会经过光栅化阶段，最终转换为屏幕空间坐标，这些屏幕坐标的X和Y分量用于确定像素在帧缓冲区中的位置。</p><p>总结来说，NDC坐标系是渲染管线中一个非常关键的步骤，它允许GPU以一种标准化和高效的方式来处理屏幕映射和透视变换。</p><h3 id="片元"><a href="#片元" class="headerlink" title="片元"></a>片元</h3><p><strong>片元（Pixel）</strong> 是图像处理和计算机图形学中的一个基本概念，指的是构成数字图像的基本单元。每个片元代表图像中的一个点，它具有特定的颜色和亮度值。在数字图像中，所有的颜色和细节都是通过这些片元的组合来表示的。</p><p>以下是片元的一些关键特性：</p><ol><li><p><strong>颜色和亮度</strong>：每个片元都存储有颜色信息，通常用红、绿、蓝（RGB）三个颜色通道的值来表示，这些值决定了片元的颜色和亮度。</p></li><li><p><strong>分辨率</strong>：图像的分辨率由其宽度和高度的片元数量决定。分辨率越高，图像的细节越丰富。</p></li><li><p><strong>像素密度</strong>：像素密度（PPI，Pixels Per Inch）是指每英寸长度内包含的片元数量，它影响图像的清晰度。</p></li><li><p><strong>位深度</strong>：位深度（Bit Depth）是指每个颜色通道可以存储的位数，它决定了颜色的精度。例如，8位颜色深度可以表示256种颜色，而24位颜色深度可以表示超过1600万种颜色。</p></li><li><p><strong>图像格式</strong>：不同的图像格式，如JPEG、PNG、GIF等，决定了片元数据的存储和压缩方式。</p></li></ol><p>在计算机图形学中，片元也用于渲染过程，其中3D模型被转换成2D图像。在这个过程中，3D场景中的每个点在投影到2D平面时，都会转换成一个片元，并根据场景的光照、纹理等属性计算其颜色和亮度值。这个过程称为光栅化（Rasterization）。</p><h3 id="抗锯齿"><a href="#抗锯齿" class="headerlink" title="抗锯齿"></a>抗锯齿</h3><ol><li><strong>SSAA</strong>:渲染到一个分辨率放大n倍的buffer,对放大n倍的buffer下采样</li><li><strong>MSAA</strong>:在光栅化阶段，技术多个覆盖样本</li><li><strong>FXAA&#x2F;TXAA</strong>:后处理技术</li></ol><h3 id="最后的最后-还在学习中会持续修改更新…"><a href="#最后的最后-还在学习中会持续修改更新…" class="headerlink" title="最后的最后,还在学习中会持续修改更新…."></a>最后的最后,还在学习中会持续修改更新….</h3>]]></content>
      
      
      <categories>
          
          <category> Shader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShaderGraph实战</title>
      <link href="//ShaderGraph/ShaderGraph200/"/>
      <url>//ShaderGraph/ShaderGraph200/</url>
      
        <content type="html"><![CDATA[<h2 id="全息投影"><a href="#全息投影" class="headerlink" title="全息投影"></a>全息投影</h2><ul><li>不受光照用Unlit</li><li>很多效果需要贴图的助力</li><li>颜色值从黑色RGB(0,0,0)到白色(1,1.1)，其他颜色的RGB值处于0-1之间透明需要设置Master节点的Alpha输入和设置中的Surface改为Transparent</li><li>做动画要想到Time节点</li><li>要改变纹理的偏移需要用到Tiling And Offset节点</li></ul><h4 id="用到的节点"><a href="#用到的节点" class="headerlink" title="用到的节点"></a>用到的节点</h4><ul><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Sample Texture 2D</a> 采样2D纹理节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD">Preview</a> 预览节点</li><li><a href="/ShaderGraph/ShaderGraph100/#UV">Tiling And Offset</a>平铺和偏移节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Time</a> 时间节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Float</a> 浮点数节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80-1">Multiply</a> 乘法节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%87%A0%E4%BD%95%E5%AD%A6">Screen Position</a>屏幕空间坐标节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%87%A0%E4%BD%95%E5%AD%A6">Position</a> 世界空间坐标节点</li></ul><h2 id="边缘光"><a href="#边缘光" class="headerlink" title="边缘光"></a>边缘光</h2><ul><li>边缘效果通常需要用到Fresnel节点</li><li>颜色做运算的时候要考虑使用加法还是乘法</li></ul><h4 id="用到的节点-1"><a href="#用到的节点-1" class="headerlink" title="用到的节点"></a>用到的节点</h4><ul><li><a href="/ShaderGraph/ShaderGraph100/#%E5%90%91%E9%87%8F">Fresnel Effect</a> 菲涅尔效应节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Color</a> 颜色节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80-1">Multiply</a> 乘法节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Float</a> 浮点数节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Sample Texture 2D</a> 采样2D纹理节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80-1">Add</a> 加法节点</li></ul><h2 id="溶解"><a href="#溶解" class="headerlink" title="溶解"></a>溶解</h2><ul><li>随机 &gt; Noise节点</li><li>透明度混合有半透明效果</li><li>和透明度测试(裁剪)只有全透明和不透明两种状态，性能更好</li><li>Step节点</li><li>颜色叠加用Add，颜色混合用Multiply</li></ul><h4 id="用到的节点-2"><a href="#用到的节点-2" class="headerlink" title="用到的节点"></a>用到的节点</h4><ul><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Sample Texture 2D</a> 采样2D纹理节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%99%AA%E5%A3%B0">Simple Noise</a> Simple Noise 节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">SliderSlider</a> Slider 节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Subtract</a> 减法节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%8F%96%E6%95%B4">Step</a> Step 节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Color</a> 颜色节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80-1">Add</a> 加法节点</li></ul><h2 id="积雪"><a href="#积雪" class="headerlink" title="积雪"></a>积雪</h2><ul><li>运用SubGraph子图来创建自定义节点，在多个图中复用</li><li>利用向量的点乘运算，来计算两个向量的相似程度</li></ul><h4 id="用到的节点-3"><a href="#用到的节点-3" class="headerlink" title="用到的节点"></a>用到的节点</h4><ul><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Sample Texture 2D</a> 采样2D纹理节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80-1">Multiply</a> 乘法节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80-1">Add</a> 加法节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E6%B3%95%E7%BA%BF">Normal Vector</a> 法线向量</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%90%91%E9%87%8F">Dot Product</a> 点乘节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%8F%96%E6%95%B4">Step</a> Step 节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Float</a> 浮点数节点</li></ul><h2 id="扭曲"><a href="#扭曲" class="headerlink" title="扭曲"></a>扭曲</h2><ul><li>产生随机 -&gt;Noise节点</li><li>产生扭曲的效果-&gt;Twirl节点</li><li>产生动画-&gt;Time节点</li><li>更改输出的形状-&gt;Procedural&gt;Shape中的多个形状节点</li></ul><h4 id="用到的节点-4"><a href="#用到的节点-4" class="headerlink" title="用到的节点"></a>用到的节点</h4><ul><li><a href="/ShaderGraph/ShaderGraph100/#UV">Twirl</a> Twirl 节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%99%AA%E5%A3%B0">Voronoi</a> Voronoi 节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Color</a> 颜色节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80-1">Multiply</a> 乘法节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Time</a> 时间节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%BD%A2%E7%8A%B6">Ellipse</a> 椭圆节点</li></ul><h2 id="干扰效果"><a href="#干扰效果" class="headerlink" title="干扰效果"></a>干扰效果</h2><ul><li>贴图产生变形的效果 &gt;修改UV</li><li>动画 &gt;Time节点</li><li>动画速度 &gt;添加速度属性，和Time节点做运算</li></ul><h4 id="用到的节点-5"><a href="#用到的节点-5" class="headerlink" title="用到的节点"></a>用到的节点</h4><ul><li><a href="/ShaderGraph/ShaderGraph100/#%E5%87%A0%E4%BD%95%E5%AD%A6">UV</a></li><li><a href="/ShaderGraph/ShaderGraph100/#%E9%80%9A%E9%81%93">Split</a></li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%99%AA%E5%A3%B0">Simple Noise</a> Simple Noise 节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Vector2</a> 二维向量节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80-1">Add</a> 加法</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Sample Texture 2D</a> 采样2D纹理节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%9F%BA%E7%A1%80">Time</a> 时间节点</li></ul><h2 id="流光效果"><a href="#流光效果" class="headerlink" title="流光效果"></a>流光效果</h2><ul><li>贴图位置变化 &gt;修改UV</li><li>根据贴图运动的空间选择UV空间</li><li>动画 &gt;Time节点</li></ul><h3 id="2D流光"><a href="#2D流光" class="headerlink" title="2D流光"></a>2D流光</h3><h4 id="用到的节点-6"><a href="#用到的节点-6" class="headerlink" title="用到的节点"></a>用到的节点</h4><ul><li>[Sample Texture 2D] 原图+流光图</li><li>[Add]</li><li>[Time]</li><li>[Tiling And Offset]</li><li>[Vector2] input x out (x,0)</li><li>[Multiply]</li><li>[Float] 设置speed</li></ul><h3 id="3D流光"><a href="#3D流光" class="headerlink" title="3D流光"></a>3D流光</h3><ul><li><a href="/ShaderGraph/ShaderGraph100/#%E5%87%A0%E4%BD%95%E5%AD%A6">Screen Position</a>屏幕空间坐标节点</li><li><a href="/ShaderGraph/ShaderGraph100/#%E5%87%A0%E4%BD%95%E5%AD%A6">Position</a> 世界空间坐标节点 Space（World或Object）区别<br>上面设置到 [Tiling And Offset] 的UV输入</li></ul>]]></content>
      
      
      <categories>
          
          <category> ShaderGraph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShaderGraph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShaderGraph节点学习</title>
      <link href="//ShaderGraph/ShaderGraph100/"/>
      <url>//ShaderGraph/ShaderGraph100/</url>
      
        <content type="html"><![CDATA[<h1 id="美术"><a href="#美术" class="headerlink" title="美术"></a>美术</h1><h2 id="法线"><a href="#法线" class="headerlink" title="法线"></a>法线</h2><ul><li><a href="">Normal Vector</a> 法线向量</li></ul><h1 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h1><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Split-Node.html?q=Split">Split</a>  将输入矢量 In<br>分成四个 Float 输出：R、G、B 和 A。这些输出矢量由输入 In 的各个通道定义：分别是红色、绿色、蓝色和 Alpha。如果输入矢量 In 的维度小于<br>4（矢量 4），则输入中不存在的输出值将为 0。</li></ul><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="https://docs.unity3d.com/cn/Packages/com.unity.shadergraph@10.5/manual/Time-Node.html">Time</a> 时间节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Float.html">Float</a> 浮点数节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Color-Node.html?q=Color">Color</a> 颜色节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Slider-Node.html">Slider</a> Slider 节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Vector-2-Node.html">Vector 2</a> 二维向量节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Vector-3-Node.html">Vector 3</a> 三维向量节点</li></ul><h2 id="几何学"><a href="#几何学" class="headerlink" title="几何学"></a>几何学</h2><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Screen-Position-Node.html?q=screen%20p">Screen Position</a><br>屏幕空间坐标节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Position-Node.html">Position</a> 世界空间坐标节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/UV-Node.html?q=UV">UV</a>  允许访问网格顶点或片元的<br>UV 坐标。可使用 Channel 下拉选单参数选择输出值的坐标通道。</li></ul><h2 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h2><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Sample-Texture-2D-Node.html">Sample Texture 2D</a><br>采样2D纹理节点</li></ul><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Multiply-Node.html">Multiply</a> 乘法节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Add-Node.html?q=Add">Add</a> 加法节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Subtract-Node.html">Subtract</a> 减法节点</li></ul><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Dot-Product-Node.html">Dot Product</a> 点乘节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Fresnel-Effect-Node.html">Fresnel Effect</a> 菲涅尔效应节点</li></ul><h2 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h2><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Step-Node.html?q=Step">Step</a> Step 节点</li></ul><h1 id="程序化"><a href="#程序化" class="headerlink" title="程序化"></a>程序化</h1><h2 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h2><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Simple-Noise-Node.html">Simple Noise</a> Simple Noise 节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Voronoi-Node.html">Voronoi</a> Voronoi 节点</li><li><a href="https://docs.unity3d.com/cn/Packages/com.unity.shadergraph@10.5/manual/Gradient-Noise-Node.html">Gradient Noise</a><br>Gradient Noise 节点 根据输入 UV 生成渐变或柏林噪声。生成噪声的比例由输入 Scale 控制。</li></ul><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Ellipse-Node.html">Ellipse</a> Ellipse 节点 以输入<br>Width 和 Height 指定的大小基于输入 UV 生成椭圆形状</li></ul><h1 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h1><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Preview-Node.html">Preview</a> 预览节点</li></ul><h1 id="UV"><a href="#UV" class="headerlink" title="UV"></a>UV</h1><ul><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Tiling-And-Offset-Node.html">Tiling And Offset</a><br>平铺和偏移节点</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Twirl-Node.html?q=Twirl">Twirl</a> Twirl 节点<br>将类似于黑洞的旋转变形效果应用于输入 UV 的值</li></ul><h1 id="Block节点"><a href="#Block节点" class="headerlink" title="Block节点"></a>Block节点</h1>]]></content>
      
      
      <categories>
          
          <category> ShaderGraph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShaderGraph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShaderGraph 关键字</title>
      <link href="//ShaderGraph/ShaderGraph004/"/>
      <url>//ShaderGraph/ShaderGraph004/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>您可以使用关键字为 Shader Graph 创建不同的变体。根据关键字的设置和编辑器中的设置，构建管线可能会剥离这些变体。</p><p>关键字的用途很多，例如：</p><p>创建具有可为每个材质实例打开或关闭的功能的着色器。<br>创建具有在某些平台上表现不同的功能的着色器。<br>创建可根据各种条件扩展复杂度的着色器。</p><p>关键字分为三种类型：Boolean、Enum 和 Built-in。根据其类型，Unity<br>在图形、着色器以及材质检视面板（可选）中定义了一个关键字。有关关键字类型的更多信息，请参阅<a href="#%E5%B8%83%E5%B0%94%E5%85%B3%E9%94%AE%E5%AD%97">布尔关键字</a>、<a href="#">Enum 关键字</a><br>和<a href="#">Built-in 关键字</a>。有关这些关键字如何影响最终着色器的更多信息，请参阅有关编写多个着色器程序变体文档。</p><p>在 Shader Graph 中，首先在 <a href="../ShaderGraph001/#Blackboard%E5%B1%9E%E6%80%A7%E9%9D%A2%E6%9D%BF">Blackboard</a><br>上定义一个关键字，然后使用一个 <a href="#">Keyword 节点</a>在图形中创建一个分支。</p><p>编辑器能够在需要变体来呈现内容时按需编译变体。如果你声明许多不同的变体，你最终可能会得到数百万或数万亿种可能性。但是，播放器需要在构建时确定正在使用哪些变体，并在预编译着色器时包含它们。为了有效地管理内存，播放机会根据其关键字和编辑器设置剥离未使用的变体。请参阅下一节“通用参数”，详细了解如何向播放器提供提示，说明它需要编译的内容以及可以忽略的内容。当播放机在生成过程中剥离变体时，它会显示粉红色错误着色器。</p><h2 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h2><p>尽管特定类型的关键字有其特定的字段，但所有关键字都具有以下参数。</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Display Name(显示名称)</td><td>字符串</td><td>关键字的显示名称。Unity 会在引用相应关键字的节点的标题栏中显示此名称，如果暴露该关键字，也会在<strong>材质检视面板</strong>中显示此名称。</td></tr><tr><td>Exposed (暴露)</td><td>布尔值 (Boolean)</td><td>如果将其设置为 true，Unity 在材质检视面板中显示相应的关键字。如果将其设置为 false，关键字不会出现在材质检视面板中。<br/>如果要访问 GLOBAL 着色器变量，请确保像通常添加输入变量一样添加它，但取消选择 Exposed。</td></tr><tr><td>Reference Name (引用名称)</td><td>字符串</td><td>关键字在着色器中的内部名称。  <br/>如果您覆盖了此参数，请注意以下几点：<br/>1. 关键字 Reference Name 始终为全大写，因此 Unity 将所有小写字母转换为大写字母。<br/>2. 如果 Reference Name 包含任何 HLSL 不支持的字符，Unity 将用下划线替换这些字符。<br/>3. 右键单击 Reference Name，然后选择 Reset Reference 可恢复为默认的 Reference Name。</td></tr><tr><td>Definition   (定义)</td><td>枚举</td><td>设置关键字在着色器中的定义方式。确定何时编译关键字变体。<br/>有三个可用选项。<br/>1. Shader Feature：Unity 在构建时剥离未使用的着色器变体。<br/>2. Multi Compile：Unity 从不剥离任何着色器变体。<br/>2. Predefined：表示活动的渲染管线已经定义了这个关键字，所以 Shader Graph 在它生成的代码中不再对其进行定义。</td></tr><tr><td>Scope  (范围)</td><td>枚举</td><td>设置定义关键字的范围。<br/>1. Global Keywords：为整个项目定义关键字，并计入全局关键字限制。<br/>2. Local Keywords：只为一个着色器定义关键字，它有自己的本地关键字限制。  <br/>3.使用预定义关键字时，Unity 将禁用此字段。</td></tr><tr><td>Stages  (阶段)</td><td></td><td>设置关键字适用的阶段。<br/>可以使用以下选项：<br/>1.<strong>全部</strong> - 将此关键字应用于所有着色器阶段。<br/>2.<strong>顶点</strong> - 将此关键字应用于顶点阶段。<br/>3.<strong>片段</strong> - 将此关键字应用于片段阶段。</td></tr></tbody></table><h2 id="布尔关键字"><a href="#布尔关键字" class="headerlink" title="布尔关键字"></a>布尔关键字</h2><p>布尔关键字要么打开，要么关闭。这会产生两个着色器变体。如果 Exposed 参数设置为 true 时，Unity 会在 Material Inspector<br>中公开布尔关键字。若要从脚本启用关键字，请在关键字的引用名称上使用 EnableKeyword。DisableKeyword<br>禁用关键字。要了解有关布尔关键字的详细信息，请参阅<a href="https://docs.unity3d.com/Manual/SL-MultipleProgramVariants.html">着色器变体和关键字</a>。</p><h3 id="特定于类型的参数"><a href="#特定于类型的参数" class="headerlink" title="特定于类型的参数"></a>特定于类型的参数</h3><p>除了上面列出的常用参数外，布尔关键字还有一个特定于布尔值的参数。</p><table><thead><tr><th>名字</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>布尔</td><td>启用此参数可将关键字的默认状态设置为打开，禁用此参数可将关键字的默认状态设置为关闭。<br/> 此参数确定着色器图生成预览时要用于关键字的值。它还定义了使用此着色器创建新材质时关键字的默认值。</td></tr></tbody></table><h2 id="Enum-关键字"><a href="#Enum-关键字" class="headerlink" title="Enum 关键字"></a>Enum 关键字</h2><p>枚举关键字可以有两个或更多状态，这些状态由您在 条目 列表中定义。如果您暴露一个枚举关键字，其 条目 列表中的 显示名称 会出现在材质检查器的下拉菜单中。</p><p>在枚举关键字的 条目名称 中，特殊字符如 ( ) 或 ! @ 是无效的。Shader Graph 会将无效字符转换为下划线 ( _ )。</p><p>当您定义一个枚举关键字时，Shader Graph 会显示每个状态的标签，由枚举的 条目名称 的净化版本附加到主 引用名称。</p><p>通过脚本使用 Material.EnableKeyword 或 Shader.EnableKeyword 函数 控制关键字时，以 {REFERENCE}_{REFERENCESUFFIX} 的格式输入状态标签。例如，如果您的引用名称是 MYENUM 并且所需的条目是 OPTION1，那么您将调用 Material.EnableKeyword(“MYENUM_OPTION1”)。当您选择一个选项时，这会禁用其他选项。</p><h3 id="特定于类型的参数-1"><a href="#特定于类型的参数-1" class="headerlink" title="特定于类型的参数"></a>特定于类型的参数</h3><p>除了上面列出的常用参数外，枚举关键字还具有以下附加参数。</p><table><thead><tr><th>名字</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>枚举</td><td>从下拉菜单中选择一个条目，以确定在 Shader Graph 生成预览时将哪个值用于关键字。这也定义了使用此着色器创建新材质时关键字的默认值。编辑“条目”列表时，Shader Graph 会自动更新此控件中的选项。</td></tr><tr><td>Entries</td><td>Reorderable List(可重新排序列表)</td><td>此列表定义关键字的所有状态。每个状态都有单独的“显示名称”和“引用后缀”。<br/>• 显示名称：显示在关键字的下拉菜单中内部检查员和材料检查员。Shader Graph 还对引用关键字的节点上的端口标签使用此名称。<br/> • 参考后缀：这是最后一个关键字，以.Reference_ReferenceSuffix</td></tr></tbody></table><h2 id="Built-in-关键字"><a href="#Built-in-关键字" class="headerlink" title="Built-in 关键字"></a>Built-in 关键字</h2><p>内置关键字始终是布尔型或枚举型，但它们的行为与您创建的布尔型或枚举型关键字略有不同。Unity 编辑器或活动的渲染管线设置它们的值，您无法编辑这些。</p><p>在图检查器的 节点设置 标签中，所有内置关键字字段都是灰色的，除了可以启用或禁用以显示 Shader Graph 预览中差异的 默认值 字段。您也无法在材质检查器中暴露内置关键字。</p><p>在 HDRP 项目中，您可以在 HDRP 资产的材料部分找到当前的质量级别。对于 URP 项目，不支持此功能，但您可以使用 SetGlobalShaderKeywords 命令在脚本中设置 MaterialQuality 枚举。例如，以下行将材料质量设置为高：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MaterialQualityUtilities.SetGlobalShaderKeywords(MaterialQuality.High);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ShaderGraph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShaderGraph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShaderGraph 数据类型</title>
      <link href="//ShaderGraph/ShaderGraph003/"/>
      <url>//ShaderGraph/ShaderGraph003/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Shader Graph 中有许多数据类型。<a href="#">节点</a>上的每个端口都有一个关联的数据类型，用于定义可以连接到哪些边。数据类型具有可用性颜色，这些颜色应用于该数据类型的端口和边。<br>有些数据类型具有关联的<a href="../ShaderGraph002">属性类型</a><br>，用于将这些值显示给使用着色器的材质的 <a href="https://docs.unity3d.com/Manual/UsingTheInspector.html">Inspector</a>。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th>名称</th><th>颜色</th><th>描述</th></tr></thead><tbody><tr><td>Float</td><td>浅蓝</td><td>一个 Float 或标量值</td></tr><tr><td>Vector 2</td><td>绿色</td><td>一个矢量 2 值。</td></tr><tr><td>Vector 3</td><td>黄色</td><td>一个矢量 3 值。</td></tr><tr><td>Vector 4</td><td>粉红色</td><td>一个矢量 4 值。</td></tr><tr><td>Dynamic Vector</td><td>浅蓝</td><td>请参阅下面的动态数据类型</td></tr><tr><td>Matrix 2</td><td>蓝色</td><td>一个矩阵 2x2 值</td></tr><tr><td>Matrix 3</td><td>蓝色</td><td>一个矩阵 3x3 值</td></tr><tr><td>Matrix 4</td><td>蓝色</td><td>一个矩阵 4x4 值</td></tr><tr><td>Dynamic Matrix</td><td>蓝色</td><td>请参阅下面的动态数据类型</td></tr><tr><td>Dynamic</td><td>蓝色</td><td>请参阅下面的动态数据类型</td></tr><tr><td>Boolean</td><td>紫色</td><td>一个布尔值。在生成的着色器中定义为浮点数</td></tr><tr><td>Texture 2D</td><td>红色</td><td>一个 <a href="https://docs.unity3d.com/Manual/class-TextureImporter.html">2D 纹理</a> 资源</td></tr><tr><td>Texture 2D Array</td><td>红色</td><td>一个 <a href="https://docs.unity3d.com/Manual/class-TextureImporter.html">2D 纹理数组</a>资源</td></tr><tr><td>Texture 3D</td><td>红色</td><td>一个 <a href="https://docs.unity3d.com/Manual/class-TextureImporter.html">3D 纹理</a> 资源</td></tr><tr><td>Cubemap</td><td>红色</td><td>一个<a href="https://docs.unity3d.com/Manual/class-TextureImporter.html">立方体贴图</a>资源</td></tr><tr><td>Virtual Texture</td><td>灰色</td><td>一个<a href="https://docs.unity3d.com/2020.1/Documentation/Manual/svt-use-in-shader-graph.html">纹理堆栈</a></td></tr><tr><td>Gradient</td><td>灰色</td><td>一个Gradient(渐变)值。在生成的着色器中定义为结构</td></tr><tr><td>SamplerState</td><td>灰色</td><td>用于对纹理进行采样的状态。</td></tr></tbody></table><h2 id="提升-截断"><a href="#提升-截断" class="headerlink" title="提升&#x2F;截断"></a>提升&#x2F;截断</h2><p>可以提升或截断所有矢量类型以匹配任何矢量类型端口。仅当相关的端口不是动态矢量类型时，才会发生此行为。截断时将会直接移除多余的通道。在提升时，所需的额外通道将填充默认值。这些值为 (0, 0, 0, 1)。</p><h2 id="动态数据类型"><a href="#动态数据类型" class="headerlink" title="动态数据类型"></a>动态数据类型</h2><p>有些数据类型是<strong>动态</strong>的。这意味着使用这些数据类型的端口可以根据与其连接的数据类型更改其基础的实际数据类型。默认情况下，使用动态数据类型的<a href="#">节点</a>只能有一个<strong>实际数据类型</strong>，这意味着一旦连接的边将其数据类型应用于该端口，该节点的所有其他动态数据类型字段将应用相同的<strong>数据类型</strong>。</p><p>一个值得注意的例外是 <a href="#">Multiply 节点</a>，该节点允许动态矩阵和矢量类型。</p><h3 id="动态-Vector"><a href="#动态-Vector" class="headerlink" title="动态 Vector"></a>动态 Vector</h3><p>动态矢量类型允许任何矢量类型的连接边。除非最低维度为 1（在这种情况下将提升 Float），否则所有连接边将自动截断为具有最低维度的类型。</p><h3 id="动态-Matrix"><a href="#动态-Matrix" class="headerlink" title="动态 Matrix"></a>动态 Matrix</h3><p>动态矩阵类型允许任何矩阵类型的连接边。所有连接边将自动截断为具有最低维度的类型。</p><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>动态类型是一种特殊情况。支持该类型的<a href="#">节点</a>必须定义其验证方式。在 <a href="#">Multiply 节点</a>的情况下，可允许任何矢量或矩阵类型的连接，从而确保根据数据类型的混合应用正确的乘法。</p>]]></content>
      
      
      <categories>
          
          <category> ShaderGraph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShaderGraph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShaderGraph 属性类型</title>
      <link href="//ShaderGraph/ShaderGraph002/"/>
      <url>//ShaderGraph/ShaderGraph002/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>属性类型是可以在 <a href="../ShaderGraph001/#Blackboard%E5%B1%9E%E6%80%A7%E9%9D%A2%E6%9D%BF">Blackboard</a>上定义以在图形中使用的属性类型。这些属性将会显示在使用着色器的材质的 <a href="https://docs.unity3d.com/Manual/UsingTheInspector.html">Inspector</a><br>中。</p><p>每个属性都有一个关联的数据类型。请参阅<a href="../ShaderGraph003/">数据类型</a>以了解更多信息。</p><h2 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h2><p>除了特定于<a href="../ShaderGraph003/">数据类型</a>的值之外，大多数属性都具有以下通用参数。</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Display Name(显示名称)</td><td>字符串</td><td>属性的显示名称</td></tr><tr><td>Exposed(公开)</td><td>布尔值 (Boolean)</td><td>如果为 true，此属性将在材质检视面板上显示</td></tr><tr><td>Reference Name(引用名称)</td><td>字符串</td><td>在着色器内用于属性的内部名称</td></tr><tr><td>Override Property Declaration(覆盖属性声明)</td><td>布尔值 (Boolean)</td><td>一个高级选项，能够显式控制此属性的着色器声明</td></tr><tr><td>Shader Declaration(着色器声明)</td><td>枚举</td><td>控制此属性的着色器声明</td></tr></tbody></table><p>注意：如果要覆盖 Reference Name 参数，请注意以下情况：</p><ul><li>如果 Reference Name 不以下划线开头，则会自动附加一个下划线字符。</li><li>如果 Reference Name 包含 HLSL 不支持的任何字符，则会删除这些字符。</li><li>可以恢复到默认的 Reference Name，方法是右键单击该名称并选择 Reset Reference。</li></ul><hr><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>定义一个 Float 值。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Float</td><td>默认值、滑动条、整数</td></tr></tbody></table><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>在材质检视面板中显示一个标量输入字段。</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Float</td><td>属性的默认值</td></tr></tbody></table><h3 id="滑动条"><a href="#滑动条" class="headerlink" title="滑动条"></a>滑动条</h3><p>在材质检视面板中显示一个滑动条字段。</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Float</td><td>属性的默认值</td></tr><tr><td>Min</td><td>Float</td><td>滑动条的最小值</td></tr><tr><td>Max</td><td>Float</td><td>滑动条的最大值</td></tr></tbody></table><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>在材质检视面板中显示一个整数输入字段。</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Float</td><td>属性的默认值</td></tr></tbody></table><hr><h2 id="Vector-2"><a href="#Vector-2" class="headerlink" title="Vector 2"></a>Vector 2</h2><p>定义一个Vector 2 值。在材质检视面板中显示一个Vector 4 输入字段，其中不使用 z 和 w 分量。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Vector 2</td><td></td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Vector 2</td><td>属性的默认值</td></tr></tbody></table><hr><h2 id="Vector-3"><a href="#Vector-3" class="headerlink" title="Vector 3"></a>Vector 3</h2><p>定义一个Vector 3 值。在材质检视面板中显示一个Vector 4 输入字段，其中不使用 w 分量。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Vector 3</td><td></td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Vector 3</td><td>属性的默认值</td></tr></tbody></table><hr><h2 id="Vector-4"><a href="#Vector-4" class="headerlink" title="Vector 4"></a>Vector 4</h2><p>定义一个Vector 4 值。在材质检视面板中显示一个Vector 4 输入字段。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Vector 4</td><td></td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Vector 4</td><td>属性的默认值</td></tr></tbody></table><hr><h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><p>定义一个Color 值。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Color</td><td>Default、HDR</td></tr></tbody></table><h3 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h3><p>在材质检视面板中显示一个 sRGB 颜色字段。</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Vector 4</td><td>属性的默认值</td></tr></tbody></table><h3 id="HDR"><a href="#HDR" class="headerlink" title="HDR"></a>HDR</h3><p>在材质检视面板中显示一个 HDR 颜色字段。</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Vector 4</td><td>属性的默认值</td></tr></tbody></table><p>注意：在 10.0 之前的版本中，Shader Graph 未校正项目色彩空间的 HDR 颜色。10.0 版本更正了此行为。使用旧版本创建的 HDR<br>颜色属性仍保持旧行为，但可以使用 <a href="../ShaderGraph001/#GraphInspector">Graph Inspector</a><br>将其升级。要在伽马空间项目中模仿旧行为，可以使用 <a href="https://docs.unity3d.com/cn/Packages/com.unity.shadergraph@10.5/manual/Colorspace-Conversion-Node.html">Colorspace Conversion 节点</a><br>将新的 HDR颜色属性从 RGB 转换到 Linear 空间。</p><hr><h2 id="Texture-2D"><a href="#Texture-2D" class="headerlink" title="Texture 2D"></a>Texture 2D</h2><p>定义 Texture 2D 值。在材质检查器中显示“Texture”类型的对象字段。如果属性检查器显示<strong>Main“Main Texture”</strong><br>，则这是着色器的。要选择或取消选择此节点作为<br>，请在图形或 <a href="../ShaderGraph001/#Blackboard%E5%B1%9E%E6%80%A7%E9%9D%A2%E6%9D%BF">Blackboard</a> 中右键单击该节点，然后选择设置为<strong>Main Texture</strong>或<strong>Clear<br>Main Texture</strong>。对应于 <a href="https://docs.unity3d.com/Manual/SL-Properties.html">Main Texture</a> ShaderLab 属性。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Texture</td><td>White(白色)、Black(黑色)、Grey(灰色)、Bump(凹凸)</td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Texture</td><td>属性的默认值</td></tr><tr><td>Use Tiling and Offset(使用平铺和偏移)</td><td>布尔值 (Boolean)</td><td>设置为 false 时，激活属性NoScaleOffset，以便将比例和偏移量与其他纹理属性分开进行操作。看SplitTextureTransformNode.</td></tr></tbody></table><hr><h2 id="Texture-3D"><a href="#Texture-3D" class="headerlink" title="Texture 3D"></a>Texture 3D</h2><p>定义一个 Texture 3D值。在材质检视面板中显示一个 Texture 3D类型的对象字段。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Texture</td><td></td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Texture</td><td>属性的默认值</td></tr></tbody></table><hr><h2 id="Texture-2D-Array"><a href="#Texture-2D-Array" class="headerlink" title="Texture 2D Array"></a>Texture 2D Array</h2><p>定义 <a href="https://docs.unity3d.com/Manual/class-TextureImporter.html">Texture 2D Array</a> 值。在材质检查器中显示“纹理 2D<br>阵列”（Texture 2D Array） 类型的对象字段。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Texture</td><td></td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Texture</td><td>属性的默认值</td></tr></tbody></table><hr><h2 id="Cubemap-立方体贴图"><a href="#Cubemap-立方体贴图" class="headerlink" title="Cubemap(立方体贴图)"></a>Cubemap(立方体贴图)</h2><p>定义 <a href="https://docs.unity3d.com/Manual/class-Cubemap.html">Cubemap</a> 值。在材质检查器中显示“Texture”类型的对象字段。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Cubemap</td><td></td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Cubemap</td><td>属性的默认值</td></tr></tbody></table><hr><h2 id="Virtual-Texture-虚拟纹理"><a href="#Virtual-Texture-虚拟纹理" class="headerlink" title="Virtual Texture(虚拟纹理)"></a>Virtual Texture(虚拟纹理)</h2><p>定义一个<a href="https://docs.unity3d.com/2020.1/Documentation/Manual/svt-use-in-shader-graph.html">纹理堆栈</a>，在材质检视面板中显示为”Texture”类型的对象字段。字段数对应于属性中的层数。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Virtual Texture</td><td></td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Texture</td><td>属性的默认值</td></tr></tbody></table><hr><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><p>定义 Boolean 值。在材料检查器中显示 ToggleUI 字段。请注意，在着色器内部，此值是** Float**。Shader Graph 中的 Boolean 类型只是为了可用性。</p><table><thead><tr><th>数据类型</th><th>模式</th></tr></thead><tbody><tr><td>Boolean</td><td></td></tr></tbody></table><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Default</td><td>Boolean</td><td>属性的默认值</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> ShaderGraph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShaderGraph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShaderGraph 界面介绍</title>
      <link href="//ShaderGraph/ShaderGraph001/"/>
      <url>//ShaderGraph/ShaderGraph001/</url>
      
        <content type="html"><![CDATA[<h2 id="MasterStack主栈"><a href="#MasterStack主栈" class="headerlink" title="MasterStack主栈"></a>MasterStack主栈</h2><p>主栈是 Shader Graph 的终点，用于定义着色器的最终表面外观。Shader Graph 应始终包含一个且仅包含一个主栈。<br>主栈包含两个上下文：</p><ol><li>Vertex 顶点着色器<br>连接到 Vertex Context 中的 <a href="#">Block</a> 的任何节点都将成为最终着色器的顶点函数的一部分</li><li>Fragment 片段着色器<br>连接到 Fragment Context 中的 <a href="#">Block</a> 的任何节点都将成为最终着色器的片元（或像素）函数的一部分</li></ol><blockquote><p>注意： 如果你将任何节点连接到两个上下文，它们将被执行两次，一次在顶点函数中，然后在片元函数中再次执行。上下文不能剪切、复制或粘贴</p></blockquote><h2 id="MainPreview预览窗口"><a href="#MainPreview预览窗口" class="headerlink" title="MainPreview预览窗口"></a>MainPreview预览窗口</h2><p>Main Preview 显示活动渲染管线上的着色器的一种表示结果。它会实时更新并自动更新以显示你在 Shader Graph 中所做的任何更改。Main Preview 的标题栏显示当前着色器的名称。</p><p>Main Preview 可移动到 Shader Graph 窗口中的任意位置，并将随该窗口的最近一个角自动移动。</p><ol><li>预览网格<br>可通过按住鼠标左键并拖动 Main Preview 来旋转预览网格，并可使用滚轮进行缩放。右键单击 Main Preview 可以更改预览网格。在此处可以选择任何原始网格类型或选择自定义网格。</li></ol><h2 id="Blackboard属性面板"><a href="#Blackboard属性面板" class="headerlink" title="Blackboard属性面板"></a>Blackboard属性面板</h2><p>你可以使用 Blackboard 对图形中的<a href="#">属性</a>和<a href="#">关键字</a>进行定义、排序和分类。在 Blackboard 中，你还可以编辑所选 Shader Graph 资源或Subgraph的路径。</p><ol><li>访问 Blackboard<br>默认情况下，Blackboard是可见的，你不能将其拖出图形并丢失它。但是，你可以将其放置在 Shader Graph Window 中的任何位置。它始终与最近的角保持相同的距离，即使你调整窗口大小也是如此。</li><li>向 Blackboard 添加属性和关键字<br>要创建新属性或关键字，请单击 Blackboard 标题栏上的添加 （+） 按钮，然后选择一种类型。有关属性类型的完整列表，请参阅<a href="#">属性类型</a>。</li><li>编辑<strong>属性</strong>和<strong>关键字</strong><br>选择黑板或图中的属性或关键字，以在节点设置菜单中修改其设置。</li></ol><table><thead><tr><th>设置</th><th>描述</th></tr></thead><tbody><tr><td>名称</td><td>属性的显示名称。编辑器会从显示名称中剥离引号并用下划线替换。通过在黑板上双击其名称来重命名项目。</td></tr><tr><td>引用</td><td>Shader Graph 内部使用的此属性的名称。虽然编辑器默认会填充此值，但你可以修改它。要还原为原始引用名称，右键点击引用（不是输入字段）并选择上下文菜单中的重置引用。如果引用名称包含 HLSL 不支持的任何字符，编辑器会用下划线替换这些字符。</td></tr><tr><td>默认值</td><td>基于此 Shader Graph 的任何材质中此属性的默认值。例如，如果你有一个草的 Shader Graph 并公开草的颜色作为属性，你可能会将默认值设置为绿色。</td></tr><tr><td>精度</td><td>设置属性的精度模式。见<a href="#">精度模式</a>。</td></tr><tr><td>暴露</td><td>启用此设置，使属性可供你通过 C# API 编辑。默认启用。</td></tr></tbody></table><ol start="4"><li><strong>修改</strong>和<strong>选择</strong>属性和关键字<ul><li>要对 Blackboard 上列出的项目重新排序，请拖放它们。</li><li>若要删除项目，请在 Windows 上使用 Delete 键或在 macOS 上使用 Command + Backspace 键。</li><li>要选择多个项目，请在进行选择时按住 Ctrl 键。</li><li>若要取消对一个或多个项目的选择，请按住 Ctrl 键，同时单击要从选择中删除的项目。</li></ul></li><li>使用 Blackboard 类别<br>若要使着色器中的属性更易于发现，请将它们组织成类别。展开和折叠类别以使 Blackboard 更易于导航。</li><li><strong>创建</strong>、<strong>重命名</strong>、<strong>移动</strong>和<strong>删除</strong>类别<ul><li>要添加类别，请在 Blackboard 上使用 +。</li><li>若要重命名类别，请双击类别名称，或右键单击并选择“重命名”。</li><li>要在 Blackboard 中移动类别，请选择并拖动该类别。</li><li>若要删除类别，请选择该类别并按 Delete 键，或右键单击并选择“删除”。删除类别也会删除其中的属性，因此请移动要保留的属性。</li></ul></li><li><strong>添加</strong>、<strong>删除</strong>和<strong>重新排序</strong>属性和关键字<ul><li>若要将属性或关键字添加到类别，请使用折叠 （⌄） 符号展开类别，然后将属性或关键字拖放到展开的类别上。</li><li>若要删除属性或关键字，请选择该属性或关键字并按 Delete，或右键单击并选择“删除”。</li><li>要对属性或关键字重新排序，请将它们拖放到某个类别中，或将它们移动到其他类别中。</li></ul></li><li>为<strong>特定属性</strong>和<strong>关键字</strong>创建类别<br>选择多个属性或关键字，然后在 Blackboard 上使用 + 创建一个包含你选择的所有项目的类别。</li><li><strong>复制</strong>和<strong>粘贴</strong>类别，带或不带属性    <ul><li>你可以将空类别、包含所有属性的类别以及包含部分属性的类别粘贴到一个或多个图形中。要复制具有所有属性的类别，请执行以下操作：<ul><li>选择属性。</li><li>使用 Ctrl+C 复制它。</li><li>使用 Ctrl+V 将其粘贴到目标图形中。</li></ul></li><li>要复制一组特定的属性，请执行以下操作：<ul><li>选择类别。</li><li>按住 Ctrl 键。</li><li>单击不想包含的属性以将其从选定内容中删除。</li><li>使用 Ctrl+C 复制属性。</li><li>使用 Ctrl+V 将其粘贴到目标图形中。</li></ul></li></ul></li><li>在材质检查器中使用类别<br>要修改使用 Shader Graph 创建的材质，可以在材质检查器中调整特定属性或关键字值，或编辑图形本身。<ul><li>使用流式处理虚拟纹理<br><a href="https://docs.unity3d.com/Manual/svt-use-in-shader-graph.html">流式处理虚拟纹理属性</a>示例纹理图层。要在材质检查器中访问这些图层，请展开相关的“虚拟纹理”部分，并在其名称旁边加上 ⌄ 符号。你可以通过检查器添加和移除图层。</li></ul></li><li>公开属性和关键字<br>Unity 默认会暴露属性和关键字。这允许你通过脚本进行写访问，以便你可以通过 C# API 编辑它们，除了图表之外。暴露的项目在其标签上有一个绿点。在节点设置菜单中启用或禁用此功能。</li><li>创建节点<br>将属性或关键字从 Blackboard 拖动到图形中，以创建此类节点。图形中节点的设置与 Blackboard 中相关属性或关键字的设置相同。展开这些节点以使用属性值的子成员。 如果属性已公开，则属性节点名称将包含一个绿点。</li></ol><h2 id="GraphInspector"><a href="#GraphInspector" class="headerlink" title="GraphInspector"></a>GraphInspector</h2><p>Graph Inspector使你能够与 <a href="#">Shader Graph 资源</a>的任何可选<strong>图形元素</strong>和<strong>图形范围设置</strong>进行交互。你可以使用 Graph Inspector 来编辑属性和默认值。<br>打开 Shader Graph 时，Graph Inspector 默认显示“<a href="#">Graph 设置</a>”选项卡。该特定Shader Graph的图形范围设置将显示在此选项卡中。</p><ul><li>如何使用<br>选择图形中的一个节点，以在Graph Inspector中显示该节点的可用设置。该节点的可用设置显示在 Graph Inspector 的“<strong>节点设置</strong>”选项卡中。例如，如果在图形或 <a href="#Blackboard%E5%B1%9E%E6%80%A7%E9%9D%A2%E6%9D%BF">Blackboard</a> 中选择属性节点，则“节点设置”选项卡将显示可编辑的属性属性。<ul><li>当前与 Graph Inspector 配合使用的图形元素：<ul><li><a href="https://docs.unity3d.com/Manual/SL-Properties.html">属性</a></li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Keywords.html">关键字</a></li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Sub-graph.html">自定义函数节点</a></li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Sub-graph.html">Subgraph Output 节点</a></li><li><a href="https://docs.unity3d.com/cn/Packages/com.unity.shadergraph@10.5/manual/Precision-Types.html">每个节点的精度</a></li></ul></li><li>当前不适用于 Graph Inspector 的图形元素：<ul><li>边缘</li><li><a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/Sticky-Notes.html">便笺</a></li><li>组</li></ul></li></ul></li><li>材质覆盖<br>通过在“图形设置”<a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@17.0/manual/surface-options.html">（Graph Settings） 中启用“允许材质覆盖”（Allow Material Override）</a> 选项，您可以通过“材质检查器”（Material Inspector） 覆盖某些图形属性</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="标题栏"><a href="#标题栏" class="headerlink" title="标题栏"></a>标题栏</h3><p>Shader Graph 窗口顶部的标题栏包含可对图形执行的操作。</p><ul><li>Save Asset 保存图形以更新 Shader Graph 资源</li><li>Save As 打开一个文件对话框，允许用户以新名称保存 <a href="#">Shader Graph 资源</a>。</li><li>Show In Project 此时将在 Project 窗口中突出显示 <a href="#">Shader Graph 资源</a></li><li>Check Out 如果启用了版本控制，将从源代码控制提供商签出 <a href="#">Shader Graph 资源</a> 。</li><li>Color Mode 提供下拉菜单以选择图形的<a href="#">颜色模式</a>。</li><li>Blackboard 切换 <a href="#Blackboard%E5%B1%9E%E6%80%A7%E9%9D%A2%E6%9D%BF">Blackboard</a> 的可见性。</li><li>GraphInspector 切换 <a href="#GraphInspector">GraphInspector</a> 的可见性。</li><li>MainPreview 切换 <a href="#MainPreview%E9%A2%84%E8%A7%88%E7%AA%97%E5%8F%A3">MainPreview</a> 的可见性。</li></ul><h3 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h3><p>工作空间是创建<a href="#">节点</a>网络的地方。 要在工作空间中导航，可按住 Alt 和鼠标左键，使用滚轮进行平移和缩放。</p><p>可按住鼠标左键并拖动以使用选取框选择多个<a href="#">节点</a>。还有各种快捷键可用于改善工作流程。</p><table><thead><tr><th>热键</th><th>Windows</th><th>OSX</th><th>描述</th></tr></thead><tbody><tr><td>剪切</td><td>Ctrl + X</td><td>Command + X</td><td>将选定的<a href="#">节点</a>剪切到剪贴板</td></tr><tr><td>复制</td><td>Ctrl + C</td><td>Command + C</td><td>将选定的<a href="#">节点</a>复制到剪贴板</td></tr><tr><td>粘贴</td><td>Ctrl + V</td><td>Command + V</td><td>粘贴剪贴板中的<a href="#">节点</a></td></tr><tr><td>焦点</td><td>F</td><td>F</td><td>将工作空间聚焦在所有或选定的<a href="#">节点</a>上</td></tr><tr><td>创建节点</td><td>空格键</td><td>空格键</td><td>打开 Create Node Menu</td></tr></tbody></table><h3 id="上下文菜单"><a href="#上下文菜单" class="headerlink" title="上下文菜单"></a>上下文菜单</h3><p>在工作空间内单击右键将打开上下文菜单。请注意，右键单击工作空间中的某一项（例如<a href="#">节点</a>）将打开该项的上下文菜单，而不是工作空间。</p><table><thead><tr><th>项</th><th>描述</th></tr></thead><tbody><tr><td>创建节点</td><td>打开 Create Node Menu</td></tr><tr><td>Create</td><td>Sticky Note在图形上创建一个新的即时贴。</td></tr><tr><td>Collapse</td><td>All Previews折叠所有<a href="#">节点</a>上的预览</td></tr><tr><td>剪切</td><td>将选定的<a href="#">节点</a>剪切到剪贴板</td></tr><tr><td>复制</td><td>将选定的<a href="#">节点</a>复制到剪贴板</td></tr><tr><td>粘贴</td><td>粘贴剪贴板中的<a href="#">节点</a></td></tr><tr><td>Delete</td><td>删除选定的<a href="#">节点</a></td></tr><tr><td>Duplicate</td><td>复制选定的<a href="#">节点</a></td></tr><tr><td>Select &#x2F; Unused Nodes</td><td>从主栈选择图形中所有对最终着色器输出没有贡献的<a href="#">节点</a></td></tr><tr><td>View &#x2F; Collapse Ports</td><td>折叠所有选定<a href="#">节点</a>上未使用的端口</td></tr><tr><td>View &#x2F; Expand Ports</td><td>展开所有选定<a href="#">节点</a>上未使用的端口</td></tr><tr><td>View &#x2F; Collapse Previews</td><td>折叠所有选定<a href="#">节点</a>上的预览</td></tr><tr><td>View &#x2F; Expand Previews</td><td>展开所有选定<a href="#">节点</a>上的预览</td></tr><tr><td>Precision &#x2F; Inherit</td><td>将所有选定<a href="#">节点</a>的精度设置为 Inherit</td></tr><tr><td>Precision &#x2F; Float</td><td>将所有选定<a href="#">节点</a>的精度设置为 Float</td></tr><tr><td>Precision &#x2F; Half</td><td>将所有选定<a href="#">节点</a>的精度设置为 Half</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ShaderGraph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShaderGraph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShaderGraph 学习大纲</title>
      <link href="//ShaderGraph/ShaderGraph000/"/>
      <url>//ShaderGraph/ShaderGraph000/</url>
      
        <content type="html"><![CDATA[<h3 id="关于-Shader-Graph"><a href="#关于-Shader-Graph" class="headerlink" title="关于 Shader Graph"></a>关于 Shader Graph</h3><p>Shader Graph 能够让您直观地构建着色器。您可以在图形框架中创建并连接节点，而不必手写代码。Shader Graph<br>提供了能反映所作更改的即时反馈，对于不熟悉着色器创建的用户来说非常简单。</p><h1 id="ShaderGraph学习大纲"><a href="#ShaderGraph学习大纲" class="headerlink" title="ShaderGraph学习大纲"></a>ShaderGraph学习大纲</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="/ShaderGraph/ShaderGraph001/" title="ShaderGraph 界面介绍">ShaderGraph 界面介绍</a></li><li><a href="/ShaderGraph/ShaderGraph002/" title="ShaderGraph 属性类型">ShaderGraph 属性类型</a></li><li><a href="/ShaderGraph/ShaderGraph003/" title="ShaderGraph 数据类型">ShaderGraph 数据类型</a></li><li><a href="/ShaderGraph/ShaderGraph004/" title="ShaderGraph 关键字">ShaderGraph 关键字</a></li></ul><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><ul><li><a href="/ShaderGraph/ShaderGraph100/" title="ShaderGraph节点学习">ShaderGraph节点学习</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ShaderGraph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShaderGraph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4399冒险大作战(开宝箱+史莱姆like)</title>
      <link href="//Gameplay/Gameplay002/"/>
      <url>//Gameplay/Gameplay002/</url>
      
        <content type="html"><![CDATA[<p>冒险大作战(微信小游戏)深度体验报告,前期玩法师后期转风弩手 等级:120 神灯等级:25 战力:30356.4K</p><h1 id="主界面底部"><a href="#主界面底部" class="headerlink" title="主界面底部"></a>主界面底部</h1><h2 id="底部栏"><a href="#底部栏" class="headerlink" title="底部栏"></a>底部栏</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><h4 id="职业"><a href="#职业" class="headerlink" title="职业"></a>职业</h4><ul><li>有3个职业，每个职业2个不同分支。</li><li>一个主动技能，5个被动技能（根据等级解锁）</li><li>觉醒6个槽位之后,主动技能变化;</li></ul><h4 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h4><ul><li>5个佩戴技能自由搭配，有方案切换，技能能延迟释放。</li><li>技能通过<a href="#%E5%95%86%E5%BA%97">商店</a>，技能抽奖获的先解锁，后获得碎片升级。</li><li>技能有拥有属性，解锁越多属性越高。</li><li>技能有佩戴属性，穿戴加成。</li><li>技能满级后能合成高一级的技能碎片。</li><li>技能等级：白、绿、蓝、紫、黄、橙、红、粉</li></ul><h4 id="职业觉醒"><a href="#职业觉醒" class="headerlink" title="职业觉醒"></a>职业觉醒</h4><ul><li>120级别解锁</li><li>通过消耗<a href="#%E7%AB%9E%E6%8A%80%E5%9C%BA">觉醒水晶</a>随机觉醒一个属性。</li><li>攻击、生命、防御、暴伤、抗暴、普攻。</li><li>觉醒后消耗<a href="#%E8%B7%A8%E6%9C%8D%E6%8E%92%E4%BD%8D%E8%B5%9B">觉醒卷轴</a>升级。</li></ul><h3 id="同伴"><a href="#同伴" class="headerlink" title="同伴"></a>同伴</h3><ul><li>5个上阵伙伴自由搭配，有方案切换。</li><li>伙伴通过<a href="#%E5%95%86%E5%BA%97">商店</a>，伙伴抽奖获的先解锁，后获得碎片升级。</li><li>伙伴有拥有属性，解锁越多属性越高。</li><li>伙伴有上阵属性，上阵加成。</li><li>伙伴满级后能合成高一级的技能碎片。</li><li>不同伙伴有不同的伤害系数和攻击速度。</li><li>伙伴等级：白、绿、蓝、紫、黄、橙、红、粉</li></ul><h3 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h3><ul><li>材料副本都可以通过看广告来增加2次副本次数。</li><li>记录最高次数</li><li>扫荡最高记录</li></ul><h4 id="深渊之门"><a href="#深渊之门" class="headerlink" title="深渊之门"></a>深渊之门</h4><ul><li>类似世界Boss，固定每个小时前20分钟能打，每只不同属性的词条</li><li>每天结算排名发奖励，<a href="#%E7%A7%8D%E5%9C%B0">种子</a>、<a href="#%E7%A5%9E%E5%99%A8">神威锤</a>、<a href="#%E6%AD%A6%E9%AD%82">武魂精华</a></li></ul><h4 id="神灯副本"><a href="#神灯副本" class="headerlink" title="神灯副本"></a>神灯副本</h4><ul><li><a href="#%E7%A5%9E%E7%81%AF">神灯</a>产出</li></ul><h4 id="冰龙副本"><a href="#冰龙副本" class="headerlink" title="冰龙副本"></a>冰龙副本</h4><ul><li>钻石货币、技能抽奖卷、伙伴抽奖卷</li></ul><h4 id="遗物副本"><a href="#遗物副本" class="headerlink" title="遗物副本"></a>遗物副本</h4><ul><li><a href="#%E9%81%97%E7%89%A9">遗物碎片</a>产出</li><li>随机匹配或邀请好友，多人副本</li></ul><h4 id="坐骑材料"><a href="#坐骑材料" class="headerlink" title="坐骑材料"></a>坐骑材料</h4><ul><li><a href="#%E5%9D%90%E9%AA%91">无限时发条</a> 材料产出</li><li>通关5个小关，boss没打死主角死了也算次数。</li></ul><h4 id="神器附魔材料副本"><a href="#神器附魔材料副本" class="headerlink" title="神器附魔材料副本"></a>神器附魔材料副本</h4><ul><li>前期打不过，后面战力上来才能开始打的副本</li><li><a href="#%E7%A5%9E%E5%99%A8">符石</a>不同级别掉落</li></ul><h4 id="试炼副本"><a href="#试炼副本" class="headerlink" title="试炼副本"></a>试炼副本</h4><ul><li><a href="#%E5%85%85%E5%80%BC%E5%A5%BD%E7%A4%BC">试炼特权卡</a>和<a href="#%E5%85%85%E5%80%BC%E5%A5%BD%E7%A4%BC">终身卡</a>，能多一些奖励，多一次挑战奖励</li><li><a href="#%E8%83%8C%E9%A5%B0">羽币</a>和<a href="#%E8%83%8C%E9%A5%B0">神羽币</a> 产出</li></ul><h4 id="飞宠副本"><a href="#飞宠副本" class="headerlink" title="飞宠副本"></a>飞宠副本</h4><ul><li>爬塔获取奖励，结算奖励</li><li><a href="#%E9%A3%9E%E5%AE%A0">飞宠蛋</a>、其他飞宠材料、飞宠进阶材料，也能选择其他道具</li></ul><h3 id="家园"><a href="#家园" class="headerlink" title="家园"></a>家园</h3><h4 id="种地"><a href="#种地" class="headerlink" title="种地"></a>种地</h4><h3 id="家族"><a href="#家族" class="headerlink" title="家族"></a>家族</h3><h3 id="商店"><a href="#商店" class="headerlink" title="商店"></a>商店</h3><h2 id="主线任务"><a href="#主线任务" class="headerlink" title="主线任务"></a>主线任务</h2><h2 id="物品栏"><a href="#物品栏" class="headerlink" title="物品栏"></a>物品栏</h2><h3 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h3><h3 id="坐骑"><a href="#坐骑" class="headerlink" title="坐骑"></a>坐骑</h3><h3 id="神器"><a href="#神器" class="headerlink" title="神器"></a>神器</h3><h3 id="遗物"><a href="#遗物" class="headerlink" title="遗物"></a>遗物</h3><h3 id="武魂"><a href="#武魂" class="headerlink" title="武魂"></a>武魂</h3><h3 id="背饰"><a href="#背饰" class="headerlink" title="背饰"></a>背饰</h3><h3 id="戒指"><a href="#戒指" class="headerlink" title="戒指"></a>戒指</h3><h3 id="飞宠"><a href="#飞宠" class="headerlink" title="飞宠"></a>飞宠</h3><h3 id="航海SLG"><a href="#航海SLG" class="headerlink" title="航海SLG"></a>航海SLG</h3><h2 id="神灯"><a href="#神灯" class="headerlink" title="神灯"></a>神灯</h2><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h1 id="主界面上半部分左边"><a href="#主界面上半部分左边" class="headerlink" title="主界面上半部分左边"></a>主界面上半部分左边</h1><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><h3 id="日程"><a href="#日程" class="headerlink" title="日程"></a>日程</h3><h3 id="跨服战"><a href="#跨服战" class="headerlink" title="跨服战"></a>跨服战</h3><h3 id="竞技场"><a href="#竞技场" class="headerlink" title="竞技场"></a>竞技场</h3><h4 id="竞技场-1"><a href="#竞技场-1" class="headerlink" title="竞技场"></a>竞技场</h4><h4 id="跨服排位赛"><a href="#跨服排位赛" class="headerlink" title="跨服排位赛"></a>跨服排位赛</h4><h3 id="游戏圈"><a href="#游戏圈" class="headerlink" title="游戏圈"></a>游戏圈</h3><h1 id="主界面上半部分右边"><a href="#主界面上半部分右边" class="headerlink" title="主界面上半部分右边"></a>主界面上半部分右边</h1><h2 id="放置奖励-离线经验"><a href="#放置奖励-离线经验" class="headerlink" title="放置奖励(离线经验)"></a>放置奖励(离线经验)</h2><h2 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h2><h3 id="充值好礼"><a href="#充值好礼" class="headerlink" title="充值好礼"></a>充值好礼</h3><h3 id="冲榜活动"><a href="#冲榜活动" class="headerlink" title="冲榜活动"></a>冲榜活动</h3><h3 id="限时礼包"><a href="#限时礼包" class="headerlink" title="限时礼包"></a>限时礼包</h3><h3 id="菇菇武道会-120级开"><a href="#菇菇武道会-120级开" class="headerlink" title="菇菇武道会(120级开)"></a>菇菇武道会(120级开)</h3><h3 id="每日消费-限时活动"><a href="#每日消费-限时活动" class="headerlink" title="每日消费(限时活动)"></a>每日消费(限时活动)</h3><h3 id="累计消费-限时活动"><a href="#累计消费-限时活动" class="headerlink" title="累计消费(限时活动)"></a>累计消费(限时活动)</h3><h3 id="主题活动-任务卡（限时活动）"><a href="#主题活动-任务卡（限时活动）" class="headerlink" title="主题活动+任务卡（限时活动）"></a>主题活动+任务卡（限时活动）</h3><h3 id="菇菇机-限时活动"><a href="#菇菇机-限时活动" class="headerlink" title="菇菇机(限时活动)"></a>菇菇机(限时活动)</h3><h3 id="招财猫-限时活动"><a href="#招财猫-限时活动" class="headerlink" title="招财猫(限时活动)"></a>招财猫(限时活动)</h3><h3 id="返利宝箱"><a href="#返利宝箱" class="headerlink" title="返利宝箱"></a>返利宝箱</h3>]]></content>
      
      
      <categories>
          
          <category> 游戏体验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动物性格测试</title>
      <link href="//Knowledge/Knowledge001/"/>
      <url>//Knowledge/Knowledge001/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最著名的是“动物性格测试”（Animal Personality Test），它是一种心理测试工具，用于帮助人们了解自己的性格特点和行为倾向。</p><p>这种理论通常将人的性格分为几种动物类型，每种动物代表一种性格特征。以下是这四种动物性格的一般描述：</p><ol><li><p><strong>老虎（支配型）</strong>：老虎代表的是支配型性格，这类人通常自信、果断、有领导力，喜欢控制和领导他人，追求成功和成就。</p></li><li><p><strong>孔雀（表现型）</strong>：孔雀代表的是表现型性格，这类人外向、热情、善于社交，喜欢成为注意的焦点，追求认可和赞赏。</p></li><li><p><strong>猫头鹰（思考型）</strong>：猫头鹰代表的是思考型性格，这类人内向、分析、逻辑性强，喜欢思考和解决问题，追求知识和真理。</p></li><li><p><strong>考拉（稳定型）</strong>：考拉代表的是稳定型性格，这类人温和、耐心、可靠，喜欢稳定和和谐，追求安全和舒适。</p></li></ol><p>这种分类方式有助于个人了解自己的性格优势和潜在的改进空间，也可以用于团队建设和人际关系的改善。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>老虎、孔雀、猫头鹰、考拉这四种动物与人物性格的对应关系，属于一种非正式的、非科学的分类知识，通常用于商业和个人发展领域。这种分类知识并不是心理学领域中的正式理论，而是一种简化的性格分类方法，它借鉴了动物的某些特征来描述人类的性格类型。</p><p>以上动物性格分类方法，通常在以下情境中使用：</p><ol><li><p><strong>团队建设</strong>：在工作场所，了解团队成员的性格类型可以帮助优化团队组合，提高团队合作效率。</p></li><li><p><strong>个人发展</strong>：个人可以通过了解自身的性格特点来制定职业发展计划，或在个人生活中做出更好的决策。</p></li><li><p><strong>教育培训</strong>：教育者可以利用性格分类来识别学生的学习风格，从而提供个性化的教学方法。</p></li><li><p><strong>销售和市场营销</strong>：在销售和市场营销中，了解客户的性格类型可以帮助销售人员更有效地与客户沟通，提供定制化的服务。</p></li><li><p><strong>人力资源管理</strong>：在招聘和员工发展中，性格分类可以帮助人力资源部门匹配合适的职位和员工，以及设计培训计划。</p></li><li><p><strong>心理咨询</strong>：虽然这不是心理学的主流方法，但某些心理咨询师可能会使用这种分类来帮助客户更好地了解自己，作为更深入心理分析的起点。</p></li><li><p><strong>社交互动</strong>：在社交场合，了解不同人的性格类型可以帮助人们更好地与他人建立联系和沟通。</p></li><li><p><strong>自我认知</strong>：作为一种自我探索的工具，性格分类可以帮助人们更深入地了解自己的优势和弱点。</p></li><li><p><strong>娱乐和趣味</strong>：性格测试也可以作为一种娱乐活动，让人们在轻松的氛围中了解和讨论性格。</p></li><li><p><strong>沟通技巧提升</strong>：了解不同性格类型可以帮助提升个人的沟通技巧，更好地与不同性格的人相处。</p></li></ol><p>尽管这种分类方法在某些情况下有用，但它不应被视为一个全面的解决方案。在实际应用中，应当结合其他更科学的性格分析工具和方法，以及个人的具体情况来使用。</p>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
